unit libXE;

interface

uses
  Vcl.Forms, Vcl.StdCtrls, Buttons, Data.DB, Vcl.DBCtrls, Vcl.ExtCtrls, TypInfo, sysUtils, Vcl.Mask, frxCtrls,
  uADStanIntf, uADStanOption, uADStanParam, uADStanError, uADDatSManager,
  uADPhysIntf, uADDAptIntf, uADStanAsync, uADDAptManager, uADCompDataSet,
  uADCompClient, JvExMask, JvToolEdit, JvBaseEdits, System.Classes, Variants;

  procedure desabilitaCampo( pForm : TForm );
  procedure habilitaCampo( pForm : TForm );
  procedure limpaCampo( pForm : TForm );
  procedure controlaBotao( pForm : TForm; pBotao : TBitBtn; pNumReg : Integer );
  procedure CopyObject(Source, Dest: TObject);
  procedure TamanhoCampo( Form : Tform; Query : tadQuery );
  procedure MostraDadosGeralQry( Form : Tform; Query : TADQuery );

  Function MostraCombo( pCombo : TComboBox; pDado : String; pNaoAchou : Integer ) : Integer;
  function RemoveAcento( Texto : String ) : String;
  Function OnlyDigit( Num : String ) : String;
  Function OnlyChar( Texto : String ) : String;
  Function ValidaCPF(Num: String) : Boolean;
  Function MostraComboDelimitado( Form : TForm; Combo : TComboBox; Dado : String; NaoAchou, Inicio, Final : Integer ) : Integer;
  Function ValidaCNPJ(Num: String) : Boolean;
  Function CompletaEspacoDireita( Texto : String; Qtd : Integer ) : String;
  function tipoField( pForm : tForm; pQuery : TADQuery; pField : String ) : TFieldType;
implementation

procedure desabilitaCampo( pForm : TForm );
var
  i : integer;
begin
  for i := 1 to pForm.ComponentCount - 1 do
  begin
    if ( pForm.Components[i] is TEdit ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TEdit( pForm.Components[i] ).Enabled := False
    else
    if ( pForm.Components[i] is TComboBox ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TComboBox( pForm.Components[i] ).Enabled := False
    else
    if ( pForm.Components[i] is TMemo ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TMemo( pForm.Components[i] ).Enabled := False
    else
    if ( pForm.Components[i] is TRadioButton ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TRadioButton( pForm.Components[i] ).Enabled := False
    else
    if ( pForm.Components[i] is TCheckBox ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TCheckBox( pForm.Components[i] ).Enabled := False;
  end;
end;

procedure habilitaCampo( pForm : TForm );
var
  i : integer;
begin
  for i := 1 to pForm.ComponentCount - 1 do
  begin
    if ( pForm.Components[i] is TEdit ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TEdit( pForm.Components[i] ).Enabled := True
    else
    if ( pForm.Components[i] is TComboBox ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TComboBox( pForm.Components[i] ).Enabled := True
    else
    if ( pForm.Components[i] is TMemo ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TMemo( pForm.Components[i] ).Enabled := True
    else
    if ( pForm.Components[i] is TRadioButton ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TRadioButton( pForm.Components[i] ).Enabled := True
    else
    if ( pForm.Components[i] is TCheckBox ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TCheckBox( pForm.Components[i] ).Enabled := True;
  end;
end;

procedure limpaCampo( pForm : TForm );
var
  i : integer;
begin
  for i := 1 to pForm.ComponentCount - 1 do
  begin
    if ( pForm.Components[i] is TEdit ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TEdit( pForm.Components[i] ).Clear
    else
    if ( pForm.Components[i] is TComboBox ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TComboBox( pForm.Components[i] ).ItemIndex := -1
    else
    if ( pForm.Components[i] is TMemo ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TMemo( pForm.Components[i] ).Lines.Clear
    else
    if ( pForm.Components[i] is TCheckBox ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TCheckBox( pForm.Components[i] ).Checked := False
    else
    if ( pForm.Components[i] is TMaskEdit ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TMaskEdit( pForm.Components[i] ).Clear
    else
    if ( pForm.Components[i] is TPanel ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TPanel( pForm.Components[i] ).Caption := ''
    else
    if ( pForm.Components[i] is TfrxComboBox ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TfrxComboBox( pForm.Components[i] ).Clear
    else
    if ( pForm.Components[i] is TJvDateEdit ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TJvDateEdit( pForm.Components[i] ).Clear
    else
    if ( pForm.Components[i] is TJvComboEdit ) and ( ( pForm.Components[i].Tag = 0 ) or ( pForm.Components[i].Tag = 2 ) ) then
    TJvComboEdit( pForm.Components[i] ).Clear
  end;
end;

Function MostraCombo( pCombo : TComboBox; pDado : String; pNaoAchou : Integer ) : Integer;
var
  ComboAux : TComboBox;
  i        : integer;
  Achou    : Boolean;

begin
  ComboAux := TComboBox.Create( nil );
  ComboAux           := TComboBox( pCombo );
  Achou              := False;
  ComboAux.ItemIndex := 0;

  for i := 0 to ( ComboAux.Items.Count - 1 ) do
  begin
    if ( ComboAux.Text = pDado ) and ( Achou = False ) then
    begin
      Achou := True;
      Result := i;
      Exit;
    end;
    ComboAux.ItemIndex := i + 1;
  end;
  if not Achou then
  Result := pNaoAchou;
end;

procedure controlaBotao( pForm : TForm; pBotao : TBitBtn; pNumReg : Integer );
var
  NumComp,
  ContComp : Integer;
  TipoCon  : Char;

Begin
  if ( pBotao.Name = 'btnNovo' ) or ( pBotao.Name = 'btnEditar' ) then
  begin
    for ContComp := 1 to pForm.ComponentCount - 1 do
    begin
      if ( pForm.Components[ContComp] is TBitBtn ) and ( ( pForm.Components[ContComp].Name = 'btnNovo' )      or
                                                         ( pForm.Components[ContComp].Name = 'btnPesquisar' ) or
                                                         ( pForm.Components[ContComp].Name = 'btnEditar' )    or
                                                         ( pForm.Components[ContComp].Name = 'btnExcluir' )   or
                                                         ( pForm.Components[ContComp].Name = 'btnImprimir' )  or
                                                         ( pForm.Components[ContComp].Name = 'btnSair' ) )    then
      TBitBtn( pForm.Components[ContComp] ).Enabled := False
      else
      if ( pForm.Components[ContComp] is TBitBtn ) and ( ( pForm.Components[ContComp].Name = 'btnGravar' )     or
                                                         ( pForm.Components[ContComp].Name = 'btnCancelar' ) ) then
      TBitBtn( pForm.Components[ContComp] ).Enabled := True
      else
      if ( pForm.Components[ContComp] is TDBNavigator ) then
      TDBNavigator( pForm.Components[ContComp] ).Enabled := False;
    end;
  end
  else
  if ( pBotao.Name = 'btnGravar' ) or ( pBotao.Name = 'btnCancelar' ) or ( pBotao.Name = 'btnPesquisar' ) or ( pBotao.Name = 'btnExcluir' ) or ( pBotao.Name = 'btnPesquisar' ) then
  begin
    for ContComp := 1 to pForm.ComponentCount - 1 do
    begin
      if ( pForm.Components[ContComp] is TBitBtn ) and ( ( pForm.Components[ContComp].Name = 'btnGravar' )     or
                                                          ( pForm.Components[ContComp].Name = 'btnCancelar' ) ) then

      TBitBtn( pForm.Components[ContComp] ).Enabled := False
      else
      if ( pForm.Components[ContComp] is TBitBtn ) and ( ( pForm.Components[ContComp].Name = 'btnNovo' )      or
                                                          ( pForm.Components[ContComp].Name = 'btnPesquisar' ) or
                                                          ( pForm.Components[ContComp].Name = 'btnImprimir' )  or
                                                          ( pForm.Components[ContComp].Name = 'btnSair' ) )    then
      TBitBtn( pForm.Components[ContComp] ).Enabled := True
      else
      if ( pForm.Components[ContComp] is TDBNavigator ) then
      TDBNavigator( pForm.Components[ContComp] ).Enabled := True;

      if ( pNumReg > 0 ) then
      begin
        if ( pForm.Components[ContComp] is TBitBtn ) and ( ( pForm.Components[ContComp].Name = 'btnEditar' ) or
                                                            ( pForm.Components[ContComp].Name = 'btnExcluir' ) ) then
        TBitBtn( pForm.Components[ContComp] ).Enabled := True;
      end
      else
      begin
        if ( pForm.Components[ContComp] is TBitBtn ) and ( ( pForm.Components[ContComp].Name = 'btnEditar' ) or
                                                            ( pForm.Components[ContComp].Name = 'btnExcluir' ) ) then
        TBitBtn( pForm.Components[ContComp] ).Enabled := False;
      end;

      if ( pBotao.Name = 'btnPesquisar' ) and ( pForm.Components[ContComp] is TBitBtn ) and ( pForm.Components[ContComp].Name = 'btnPesquisar' ) then
      TBitBtn( pForm.Components[ContComp] ).Enabled := False;
    end;
  end;
end;

function RemoveAcento( Texto : String ) : String;
const
  ComAcento = '‡‚ÍÙ˚„ı·ÈÌÛ˙Á¸¿¬ ‘€√’¡…Õ”⁄«‹';
  SemAcento = 'aaeouaoaeioucuAAEOUAOAEIOUCU';

var
   x: Integer;

begin;
  for x := 1 to Length(Texto) do
  if Pos(Texto[x],ComAcento) <> 0 then
  Texto[x] := SemAcento[Pos(Texto[x], ComAcento)];

  Result := Texto;
end;

Function OnlyDigit( Num : String ) : String;
var
  Numero : String;
  i      : Integer;
begin
  Numero := '';
  for i := 1 to Length( Num ) do
  if Num[i] in ['0'..'9'] then
  Numero := Numero + Num[i];

  Result := Numero;
end;

Function OnlyChar( Texto : string ) : string;
var
  N : integer;

begin
  for N := 1 to length( Texto ) do
  begin
    if Copy( Texto, N, 1 ) = '1' then
    begin
      Delete( Texto, N, 1 );
      Insert( ' ', Texto, N );
    end
    else
    if Copy( Texto, N, 1 ) = '2' then
    begin
      Delete( Texto, N, 1 );
      Insert( ' ', Texto, N );
    end
    else
    if Copy( Texto, N, 1 ) = '3' then
    begin
      Delete( Texto, N, 1 );
      Insert( ' ', Texto, N );
    end
    else
    if Copy( Texto, N, 1 ) = '4' then
    begin
      Delete( Texto, N, 1 );
      Insert( ' ', Texto, N );
    end
    else
    if Copy( Texto, N, 1 ) = '5' then
    begin
      Delete( Texto, N, 1 );
      Insert( ' ', Texto, N );
    end
    else
    if Copy( Texto, N, 1 ) = '6' then
    begin
      Delete( Texto, N, 1 );
      Insert( ' ', Texto, N );
    end
    else
    if Copy( Texto, N, 1 ) = '7' then
    begin
      Delete( Texto, N, 1 );
      Insert( ' ', Texto, N );
    end
    else
    if Copy( Texto, N, 1 ) = '8' then
    begin
      Delete( Texto, N, 1 );
      Insert( ' ', Texto, N );
    end
    else
    if Copy( Texto, N, 1 ) = '9' then
    begin
      Delete( Texto, N, 1 );
      Insert( ' ', Texto, N );
    end
    else
    if Copy( Texto, N, 1 ) = '0' then
    begin
      Delete( Texto, N, 1 );
      Insert( ' ', Texto, N );
    end;
  end;
  Result := Texto;
end;

procedure CopyObject(Source, Dest: TObject);
var
  TypInfo      : PTypeInfo;
  PropList     : TPropList;
  PropCount, i : integer;
  Value        : variant;
begin
  TypInfo   := Source.ClassInfo;
  PropCount := GetPropList( TypInfo, tkAny, @PropList );

  for i := 0 to PropCount - 1 do
  begin
    if ( PropList[i]^.SetProc <> nil ) then
    begin
      Value := GetPropValue(Source, PropList[i]^.Name);
      SetPropValue(Dest, PropList[i]^.Name, Value);
    end;
  end;
end;

Function ValidaCPF(Num: String): Boolean;
var
  Temp: Integer;
  Numero: String;
  n: array [1..9] of Integer;
  d: array [1..2] of Integer;
begin
  Numero:='';
  for Temp := 1 to 14 do
  if Num[Temp] in ['0'..'9'] then
  Numero := Numero + Num[Temp];

  for Temp := 1 to 9 do
  n[Temp] := StrToInt( Numero[Temp] );
  d[1] := n[9] * 2 + n[8] * 3 + n[7] * 4 + n[6] * 5 + n[5] * 6 + n[4] * 7 + n[3] * 8 + n[2] * 9 + n[1] * 10;
  d[1] := 11 - ( d[1] mod 11 );
  if d[1] >= 10 then
  d[1] := 0;
  d[2] := d[1] * 2 + n[9] * 3 + n[8] * 4 + n[7] * 5 + n[6] * 6 + n[5] * 7 + n[4] * 8 + n[3] * 9 + n[2] * 10 + n[1] * 11;
  d[2] := 11 - ( d[2] mod 11 );
  if d[2] >= 10 then
  d[2] := 0;
  if IntToStr( d[1] )+ IntToStr( d[2] ) = Numero[10] + Numero[11] then
  ValidaCPF := True
  else
  ValidaCPF := False;
end;

Function MostraComboDelimitado( Form : TForm; Combo : TComboBox; Dado : String; NaoAchou, Inicio, Final : Integer ) : Integer;
var
  ComboAux : TComboBox;
  i        : integer;
  Achou    : Boolean;

begin
  ComboAux := TComboBox.Create( nil );
  ComboAux           := TComboBox( Combo );
  Achou              := False;
  ComboAux.ItemIndex := 0;

  for i := 0 to ( ComboAux.Items.Count - 1 ) do
  begin
    if ( Copy( ComboAux.Text, Inicio, Final ) = Dado ) and ( Achou = False ) then
    begin
      Achou := True;
      Result := i;
      Exit;
    end;
    ComboAux.ItemIndex := i + 1;
  end;
  if not Achou then
  Result := NaoAchou;
end;

Function ValidaCNPJ(Num: String): Boolean;
var
  Temp: Integer;
  Numero: String;
  n: array [1..12] of Integer;
  d: array [1..2] of Integer;
begin
  Numero := '';
  for Temp := 1 to 18 do
  if Num[Temp] in ['0'..'9'] then
  Numero := Numero + Num[Temp];
  for Temp := 1 to 12 do
  n[Temp] := StrToInt( Numero[Temp] );
  d[1]:= n[12] * 2 + n[11] * 3 + n[10] * 4 + n[9] * 5 + n[8] * 6 + n[7] * 7 + n[6] * 8 + n[5] * 9 + n[4] * 2 +
         n[3] * 3 + n[2] * 4 + n[1] * 5;
  d[1] := 11 - ( d[1] mod 11 );
  if d[1] >= 10 then
  d[1] := 0;
  d[2] := d[1] * 2 + n[12] * 3 + n[11] * 4 + n[10] * 5 + n[9] * 6 + n[8] * 7 + n[7] * 8 + n[6] * 9 + n[5] * 2 +
          n[4] * 3 + n[3] * 4 + n[2] * 5 + n[1] * 6;
  d[2] := 11 - ( d[2] mod 11 );
  if d[2] >= 10 then
  d[2] := 0;
  if IntToStr( d[1]) + IntToStr( d[2] ) = Numero[13] + Numero[14]
  then
  ValidaCNPJ := True
  else
  ValidaCNPJ := False;
end;

Function CompletaEspacoDireita(texto : string; qtd : integer) : string;
var
  Tamanho,I : integer;
  TextoRet  : String;

begin
  Tamanho := Length(Texto);

  if Tamanho > Qtd then
  Result := Copy( Texto, 1, Qtd )
  else
  begin
    for I := 1 to (Qtd - Tamanho) do
    begin
      TextoRet := TextoRet + ' ';
    end;
    Result := Texto + TextoRet;
  end;
end;

Procedure TamanhoCampo( Form : Tform; Query : TADQuery );
var
  i, j : Integer;
  vCampo : String;

begin
  for i := 1 to Query.FieldCount do
  begin
    vCampo := LowerCase( ( Copy( Query.Fields[ i - 1 ].Name, ( Length( Query.Name ) + 1 ), ( Length( Query.Fields[ i - 1 ].Name ) - Length( Query.Name ) ) ) ) );

    for j := 0 to Form.ComponentCount - 1 do
    begin
      if ( Form.Components[j] is TEdit ) and ( ( LowerCase( Form.Components[j].Name ) = 'ed' + vCampo ) ) then
      TEdit( Form.Components[j] ).MaxLength := Query.fieldByName( vCampo ).Size
      else
      if ( Form.Components[j] is TjvComboEdit ) and ( ( LowerCase( Form.Components[j].Name ) = 'ed' + vCampo ) ) then
      TjvComboEdit( Form.Components[j] ).MaxLength := Query.fieldByName( vCampo ).Size
      else
      if ( Form.Components[j] is TMemo ) and ( ( LowerCase( Form.Components[j].Name ) = 'ed' + vCampo ) ) then
      TMemo( Form.Components[j] ).MaxLength := Query.fieldByName( vCampo ).Size
      else
      if ( Form.Components[j] is TJvCalcEdit ) and ( ( LowerCase( Form.Components[j].Name ) = 'ed' + vCampo ) ) then
      TJvCalcEdit( Form.Components[j] ).MaxLength := Query.fieldByName( vCampo ).Size;
    end;
  end;
end;

function tipoField( pForm : tForm; pQuery : TADQuery; pField : String ) : TFieldType;
var
  NumComp,
  ContComp : Integer;

begin
  for ContComp := 0 to pForm.ComponentCount - 1 do
  begin
    if ( pForm.Components[ContComp] is TADQuery ) and ( pForm.Components[ContComp].Name = 'qryPesquisa' ) then
    begin
      with TADQuery( pForm.Components[ContComp] ) do
      begin
        Result := FieldByname( pField ).DataType;

{        case FieldByname( pField ).DataType of
          ftBoolean : Result := 'ftBoolean';
          ftDate    : Result := 'ftDate';
          ftFloat   : Result := 'ftFloat';
          ftInteger : Result := 'ftInteger';
          ftString  : Result := 'ftString';
        end;}
      end;
    end;
  end;
end;

Procedure MostraDadosGeralQry( Form : Tform; Query : TADQuery );
var
  i, j : Integer;
  vCampo : String;

begin
  if Query.RecordCount > 0 then
  begin
    for i := 1 to Query.FieldCount do
    begin
      vCampo := LowerCase( ( Copy( Query.Fields[ i - 1 ].Name, ( Length( Query.Name ) + 1 ),
                ( Length( Query.Fields[ i - 1 ].Name ) - Length( Query.Name ) ) ) ) );

      for j := 0 to Form.ComponentCount - 1 do
      begin
        if ( Form.Components[j] is TEdit ) and ( ( LowerCase( Form.Components[j].Name ) = 'field' + vCampo ) ) then
        TEdit( Form.Components[j] ).Text := Query.fieldByName( vCampo ).Text
        else
        if ( Form.Components[j] is TPanel ) and ( ( LowerCase( Form.Components[j].Name ) = 'field' + vCampo ) ) then
        begin
          if TPanel( Form.Components[j] ).Alignment = taLeftJustify then
          TPanel( Form.Components[j] ).Caption := ' ' + Query.fieldByName( vCampo ).Text
          else
          TPanel( Form.Components[j] ).Caption := Query.fieldByName( vCampo ).Text;
        end
        else
        if ( Form.Components[j] is TMaskEdit ) and ( ( LowerCase( Form.Components[j].Name ) = 'field' + vCampo ) ) then
        TMaskEdit( Form.Components[j] ).Text := Query.fieldByName( vCampo ).Text
        else
        if ( Form.Components[j] is TCheckBox ) and ( ( LowerCase( Form.Components[j].Name ) = 'field' + vCampo ) ) then
        TCheckBox( Form.Components[j] ).Checked := Query.fieldByName( vCampo ).Value
        else
        if ( Form.Components[j] is TComboBox ) and ( ( LowerCase( Form.Components[j].Name ) = 'field' + vCampo ) ) then
        begin
          if Query.fieldByName( vCampo ).Value <> Null then
          TComboBox( Form.Components[j] ).ItemIndex := MostraComboDelimitado( Form, TComboBox( Form.Components[j] ),
                                                                              Query.fieldByName( vCampo ).Value, -1 , 1,
                                                                              Query.fieldByName( vCampo ).Size )
          else
          TComboBox( Form.Components[j] ).ItemIndex := -1;
        end
        else
        if ( Form.Components[j] is TjvComboEdit ) and ( ( LowerCase( Form.Components[j].Name ) = 'field' + vCampo ) ) then
        TjvComboEdit( Form.Components[j] ).Text := Query.fieldByName( vCampo ).Text
        else
        if ( Form.Components[j] is TJvDateEdit ) and ( ( LowerCase( Form.Components[j].Name ) = 'field' + vCampo ) ) then
        begin
           if ( Query.fieldByName( vCampo ).Text <> '' ) then
           TJvDateEdit( Form.Components[j] ).Date := Query.fieldByName( vCampo ).AsDateTime
           else
           TJvDateEdit( Form.Components[j] ).Clear;
        end
        else
        if ( Form.Components[j] is TMemo ) and ( ( LowerCase( Form.Components[j].Name ) = 'field' + vCampo ) ) then
        begin
          if Query.fieldByName( vCampo ).Value <> Null then
          TMemo( Form.Components[j] ).Text := Query.fieldByName( vCampo ).Value
          else
          TMemo( Form.Components[j] ).Text := '';
        end
        else
        if ( Form.Components[j] is TJvCalcEdit ) and ( ( LowerCase( Form.Components[j].Name ) = 'field' + vCampo ) ) then
        TJvCalcEdit( Form.Components[j] ).Value := Query.fieldByName( vCampo ).Value;
      end;
    end;
  end;
end;

end.

